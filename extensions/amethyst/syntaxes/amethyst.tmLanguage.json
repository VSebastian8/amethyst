{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "myst",
	"patterns": [
		{
			"include": "#comments"
		},
		{
			"include": "#strings"
		},
		{
			"include": "#chars"
		},
		{
			"include": "#keywords"
		},
		{
			"include": "#symbols"
		},
		{
			"include": "#constants"
		},
		{
			"include": "#entities"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
					"name": "comment.line.myst",
					"match": "(\\-\\-).*",
					"captures": {
						"1": {
							"name": "punctuation.definition.comment.myst"
						}
					}
				},
				{
					"name": "comment.block.myst",
					"begin": "(\\{\\-)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.myst"
						}
					},
					"end": "(\\-\\})",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.comment.myst"
						}
					}
				}
			]
		},
		"strings": {
			"name": "string.quoted.double.myst",
			"begin": "\"",
			"end": "\"",
			"patterns": [
				{
					"name": "constant.character.escape.myst",
					"match": "\\\\."
				}
			]
		},
		"chars": {
			"patterns": [
				{
					"name": "string.quoted.single.myst",
					"match": "('.')"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"name": "keyword.declaration.myst",
					"match": "\\b(automaton|state)\\b"
				},
				{
					"name": "keyword.control.myst",
					"match": "(?<!\\.)\\b(initial|accept|reject)\\b"
				},
				{
					"name": "keyword.declaration.myst",
					"match": "\\b(complement|intersect|reunion|chain|repeat|move|override|place|shift)\\b"
				},
				{
					"name": "keyword.operator.write.myst",
					"match": "(\\/)"
				},
				{
					"name": "keyword.operator.arrow.myst",
					"match": "(\\-\\>)"
				},
				{
					"name": "keyword.operator.move.myst",
					"match": "(\\,)"
				},
				{
					"name": "keyword.operator.equals.myst",
					"match": "(\\=)"
				},
				{
					"name": "punctuation.definition.symbol.blank.myst",
					"match": "(@)"
				},
				{
					"name": "punctuation.definition.symbol.wildcard.myst",
					"match": "(_)"
				},
				{
					"name": "punctuation.definition.symbol.wildcard.myst",
					"match": "(\\.)"
				}
			]
		},
		"symbols": {
			"patterns": [
				{
					"name": "punctuation.definition.symbol",
					"match": "([A-Z0-9\\!\\#\\$\\%\\^&\\*\\[\\]\\-\\+\\=\\/\\?])(?=\\s*\\/)"
				},
				{
					"name": "punctuation.definition.symbol",
					"match": "(?<=\\/\\s*)([A-Z0-9\\!\\#\\$\\%\\^&\\*\\[\\]\\-\\+\\=\\/\\?])"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"name": "constant.language.move.myst",
					"match": "\\b(L|R|N)\\b"
				},
				{
					"name": "constant.numeric.myst",
					"match": "\\b([0-9]+)\\b"
				}
			]
		},
		"entities": {
			"patterns": [
				{
					"name": "entity.name.function.myst",
					"match": "\\b([a-z][a-z0-9_]*)\\b(?=\\s*(\\(|\\{|\\=))"
				},
				{
					"match": "(?<=\\(|,)\\s*([a-z][a-z0-9_\\.]*)\\s+([a-z][a-z0-9_]*)",
					"captures": {
						"1": {
							"name": "entity.name.type.myst"
						},
						"2": {
							"name": "variable.parameter.myst"
						}
					}
				},
				{
					"name": "entity.name.type.myst",
					"match": "(?<=\\(|,)\\s*([a-z][a-z0-9_]*)"
				},
				{
					"name": "variable.parameter.myst",
					"match": "\\b([a-z][a-z0-9_]*)(?=\\.)"
				},
				{
					"name": "entity.name.function.myst",
					"match": "(?<=(\\-\\>\\s*|state\\s*|\\.))\\b([a-z][a-z0-9_]*)\\b"
				}
			]
		}
	},
	"scopeName": "source.myst"
}